0、删除对象的属性
    delete obj.属性
1、this
    当前函数执行的上下文，this是在函数调用的时候确定的，不是在定义的时候确定的，谁调用它就指的谁
    1、事件绑定：this指的是绑定该事件的元素
    2、函数调用
        函数名()
        自执行函数
        setInterval
        setTimeOut
        this指向window
    3、方法调用
        this指的是拥有这个方法的对象
        如果是多个对象调用的话指的是最近的对象
    4、构造函数的this（后面讲）
    5、箭头函数的this
        箭头函数会捕获其所在上下文的this作为自己的this。也就是说，箭头函数内部与其外部的this是保持一致的。
2、apply()、call()、bind()方法
    当函数被.call()或者.apply()调用时，执行的是隐式调用。
    格式：函数.call(this指向, 'value1', 'value2')
    格式：函数.apply(this指向, ['value1', 'value2'])
    它们是函数下面的方法，作用是调用函数，并改变函数中的this指向。
    .call()接受一组参数，例如myFunction.call(thisValue, 'value1', 'value2')
    .apply()接受的一组参数必须是一个类似数组的对象，例如myFunction.apply(thisValue, ['value1', 'value2'])
    第一个参数传递的是字符串如"abc"，则this指向为{0:"a",1:"b",2:"c"}
    bind()
    bind方法传递给调用函数的参数逐个列出。bind方法与call、apply最大的不同就是
    前者返回一个绑定上下文的函数，而后两者是直接执行了函数。
3、类数组
    只包含使用从零开始，且自然递增的整数做键名，并且定义了length表示元素个数的对象，我们就认为他是类数组对象
    类数组和数组区别：
        一个是对象，一个是数组；类数组不能调用数组的方法
    常见的类数组对象：
        arguments、getElementsByClassName(className)、getElementsByTagName(tagName)等
     类数组转数组：
        1、Array.prototype.slice.call()
        2、Array.from(类数组)
        3、[...类数组]

4、函数式编程
好处：
A、语义更加清晰
	B、可复用性更高
	C、可维护性更好
	D、作用域局限，副作用少

5、高阶函数：一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。作为参数的函数叫做回调函数

1、封装forEach方法
数组原生的arr.forEach(function(ele, index, array){})函数的三个参数ele,index,array分别是遍历的某一项，下标，数组本身
对数组中的每一项运行给定函数，这个方法没有返回值
2、封装map方法
    arr.map(function(ele, index, array){})
    函数的三个参数ele,index,array分别是遍历的某一项，下标，数组本身
    对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组
3、封装filter方法
    arr.filter(function(ele, index, array){})
    对数组中的每一项运行给定函数，返回该函数会返回true的项组成的数组
    数组的forEach()、map()、filter()特点：
4、封装some方法
5、封装every方法



