1、数据类型
	基本数据类型：
		number、string、boolean、null、undefined
	引用数据类型 object 
		只能给引用数据类型的值动态添加属性
	存放的位置：
		引用类型值在内存中占据空间大小不固定，因此被保存在堆内存中。
		基本类型值在内存中占据固定大小空间，因此被保存在栈内存中。
	复制变量的值：基本类型是复制具体的值,引用类型复制的是地址值或者称作指针
传递参数：按值传递
    基本类型的参数传递和基本类型复制变量一样
    引用类型的参数传递和引用类型复制变量一样，传递的是地址值
检测类型：
    typeof 检测变量是字符串、数值、布尔值、还是undefined
           检测function  还是function
           检测null和对象时返回的是object
    typeof用来检测基本数据类型的
    instanceof
      格式：对象 instanceof 构造函数 返回值boolean类型
      所有引用类型的值都是Object的实例
      用来检测引用数据类型
2、执行环境与作用域
    执行环境：定义了变量和函数有权访问的其他数据，决定了他们各自的行为，每个环境都有一个与之关联的变量对象，环境中定义的所有变量和函数都保存在这个对象中
    全局执行环境是最外围的一个执行环境，它的对象就是window
    某个执行环境里面的代码执行完毕后，保存在其中的所有的变量和函数也会随之销毁，全局执行环境直到程序退出
    每个函数都有自己的执行环境
    代码在环境中执行时会创建一个作用域链确保对变量和函数的有序访问。
    作用域链查找规则是从内到外。
    延长作用域链：
        延长作用域链原理是 在作用域链的前端临时增加一个变量对象，在代码执行后该变量对象会被立即移除。
       with语句、try catch语句、eval
	没有块级作用域,只有全局作用域和函数作用域
3、函数提升:只有函数声明时才有函数提升 值和声明都会提升
	变量提升
		将变量声明及函数声明提升至当前作用域的顶端，然后进行接下来的处理
	函数提升的优先级高
4、垃圾收集：
    局部变量：离开执行环境时，自动销毁
    全局变量：手动解除引用或者关闭程序
    自动垃圾回收机制

    垃圾收集方式：
    1、标记清除
        当变量进入环境时，做上标记进入环境，离开环境时标记离开环境
        给当前不使用的值加上标记
    2、引用计数