创建正则：
	1)创建方式：字面量；

		功能：模式匹配/文本检索/替换功能

		var rag= /正则语法/ 修饰符
		var rag=nwe RegE
		例：var rag=/\d/;

		正则属性 lastIndex 上一次查找文本后的第一个字符的位置
		
	修饰符：
 		g ==>表示全局的意思   i ==>不区分大小写	m ==>多行搜索

	元字符：有特殊功能的字符

		\b  单词边界（非\w）
		\d  表示的是0-9之间的数字
		\D  表示非数字
		\w  字母、数字、下划线
		\W  非数字、字母、下划线
		\s  空格或者空白
		\S  非空格或者空白
		 .  任意字符不包括\n
		^   开始  
		$   结束
		[^] 类同于非
		\   转义字符
		（）分   组
		[\u4e00-\u9fa5]；匹配汉字 
		[]  首先匹配一个字符 或的关系  例如[abc]：匹配a或b或c
		 |  首先匹配一个字符 或的关系  例如a|b|c  匹配a或b或c
			[0-9]==[0123456789]==\d
			[a-zA-Z] 判断字母大小写
			[a-zA-Z0-9]判断字母大小写、数字、	
		
		{} 量词 可以匹配多个字符

			{n}   匹配n个字符  
			{n,m} 匹配n-m个字符
			{n,}  匹配至少n个
			+     至少一个
			*     0个或者多个
			？    0个或者1个
			例如  rag=/\d{3}/  匹配三个\d\d\d

		trim()==> 去除前后空格

正则方法：exec() 返回符合匹配模式的字符结果 为数组模式，如果没有则返回null
		返回的数组第一个元素是匹配结果第一项，第二个元素开始就是符合匹配的字配项
	 text（要检测的字符串）==> 正则的方法；返回值为boolean类型


字符串的: match（）把符合匹配模式的字符取出来，返回来的是数组模式，没有匹配项则返回null

			有g则返回结果是符合rag条件的所有项  通过数组方式提取出来     
			如果没有g则返回符合rag条件的第一项 通过数组方式提取出来
			
		例如：var rag=/\d{4}-\d{2}-\d{2}/
			str="2018-12-20,2017-12-07,day"
			console.log(str.match(rag))  ["2018-12-20"] 

		      var rag=/\d{4}-\d{2}-\d{2}/g
			str="2018-12-20,2017-12-07,day"
			console.log(str.match(rag))  ["2018-12-20","2017-12-07"] 
		
	replace 
	   *.replace(正则，function(){})
	     函数：
		第二个参数是函数的时候，这个函数第一个形参指的是匹配项，第二项开始的第一个小括号里的字符
		这个函数有返回值，返回值就是替换的文本。

	   $指的是小括号  $n指的是第n个小括号里的内容；
	search
	   *.search（正则）==>不支持全局匹配
	     返回符合条件的下标值/找不到时返回-1

	

*
*
*

*
*
*
*

*
*

*

	
	